==============================================================================
Introduction                                                           *firvish*


This plugin is heavily inspired by [vim-dirvish](https://github.com/justinmk/vim-dirvish).

firvish.nvim is a buffer centric job control plugin. It provides mappings for handling buffer list, history, neovim and external commands. The output of these commands can be streamed to a dedicated buffer and/or an errorlist (e.g. a quickfix list or location list).

The main goal of firvish.nvim is to provide a single way of interacting with external commands, and internal commands of NeoVim through the use of buffers. They are used to interact with the output of commands, and the input is sent to external commands to interactively communicate with them.

See the documentation for more details.

==============================================================================
Features                                                      *firvish.features*

Firvish is split into features, which can enabled on an individual basis and correspond to user
commands. Firvish does NOT create keymappings except in Firvish specific buffers (e.g. |firvish-buffers|).

These are the currently available features:
  * buffers - see |firvish.features.buffers|
  * fh - see |firvish.features.fh|
  * find - see |firvish.features.find|
  * frun - see |firvish.features.frun|
  * grep - see |firvish.features.grep|
  * history - see |firvish.features.history|
  * jobs - see |firvish.features.jobs|

Features can be enabled or disabled individually through |firvish.setup|:

>
require("firvish").setup {
  features = {
    buffers = true,  -- Enables the "buffer" feature
    history = false, -- Disables the "history" feature
  },
}
<

You can also enable all features:

>
require("firvish").setup {
  features = true, -- Enables all features
}
<


firvish.setup()                                                  *firvish.setup*

    See: ~
        |firvish.features|


==============================================================================
Buffers                                               *firvish.features.buffers*

The buffer list is like |:ls| except that the buffer list itself is contained in a normal vim
buffer. This allows you to manipulate it like any other buffer. You can |dd| a few lines
and |:write| the buffer to delete buffers (|:bdelete|, |:bwipeout|). You can edit buffer names by
editing the line corresponding to that buffer.

The buffer list can be configured through |firvish.setup|. By default, it has the following
configuration:

>
require("firvish").setup {
    features = {
        buffers = {
            behavior = {
                -- Specifies how to open the buffer list when using the |:Buffers| command
                -- or the Lua API.
                open = "edit",
                -- Specifies how to open the buffer list when bang ! is given to the |:Buffers|
                -- command.
                bang_open = "vsplit",
            },
            -- The default filter applied to the buffer list. Only show buffers that are listed
            -- and not a quickfix or firvish buffer.
            -- See |firvish-filters|
            filter = buf_listed + (buf_buftype_not { "quickfix" }) + (buf_filetype_not { "firvish-*" }),
            keymaps = {
                -- See |firvish-buffers-keymaps|
            },
        },
    },
}
<

                                                                      *:Buffers*
:Buffers[!]
    Opens the buffer list.
    If bang ! is given, will use the alternate open behavior:
    `features.buffers.behavior.bang_open`


                                                               *firvish-buffers*
                                                       *firvish-buffers-keymaps*
The firvish-buffers filetype is used when viewing the buffer list.

Default mappings ~
    <CR>    Open file under cursor
    <C-s>   Open file under cursor in a split
    <C-v>   Open file under cursor in a vertical split

Mappings can be configured through |firvish.setup|. Assigning a mapping to `false` disables it.
When configuring mappings through |firvish.setup|, you must specify a callback function. This
callback function will receive the buffer-local lib (|firvish.filetype.buffers|) which can be used to
perform common actions relevant to the buffer list (getting the buffer under the cursor,
refreshing the buffer list, etc).

>
require("firvish").setup {
    features = {
        buffers = {
            keymaps = {
                n = {
                    gm = {
                        callback = function(lib)
                            -- Filter the buffer list to show only modified files
                            local is_modified = Filter:new(function(buffer)
                                return buffer:get_option "modified" == true
                            end)
                            lib.refresh(is_modified)
                        end,
                        desc = "[firvish] Filter modified files",
                    },
                },
            },
        },
    },
}
<


==============================================================================
Fh                                                                  *firvish.fh*

The "fh" feature provides several commands that ... ???

                                                                         *:Fhdo*
:[range]Fhdo[!] {cmd}
    Generates a script with {cmd} applied to [range] and the respective filepath
    inserted wherever {} appears in {cmd}. If bang ! is given, the resulting script is a vim
    script, otherwise it is a shell script.

    For example, to rename a list of visual-selected files: >
        :'<,'>Fhdo mv {} {}-copy.txt
<    Run the script with |Z!| or `:!%`

==============================================================================
Find                                                              *firvish.find*

The "find" feature provides several commands that allow you to find files and populate a dedicate
buffer with the search results. The output buffer will have its filetype set to |firvish-dir|.

This command requires `fd` (https://github.com/sharkdp/fd) to be installed.

                                                                           *:Fd*
:[range]Fd[!] {args}
    Runs a find (using fd) and sends the output to a buffer.
    If bang ! is given, the command will run in the background.

                                                                          *:Cfd*
:[range]Cfd[!] {args}
    Runs a find (using fd) and sends the output to the |quickfix-window|.
    If bang ! is given, will |:copen| the quickfix-window as soon as the job completes.

                                                                          *:Lfd*
:[range]Lfd[!] {args}
    Runs a find (using fd) and sends the output to the |location-list-window|.
    If bang ! is given, will |:lopen| the location-list-window as soon as the job completes.

==============================================================================
Frun                                                              *firvish.frun*

                                                                         *:Frun*
                                                                        *:Cfrun*
                                                                        *:Lfrun*
Frun stuff

==============================================================================
Grep                                                              *firvish.grep*

                                                                           *:Rg*
                                                                          *:Crg*
                                                                          *:Lrg*
Ripgrep stuff.

==============================================================================
History                                                        *firvish.history*

                                                                      *:History*
History stuff

history.on_buf_delete()                                  *history.on_buf_delete*


history.on_buf_leave()                                    *history.on_buf_leave*


history.close_history()                                  *history.close_history*


history.open_history()                                    *history.open_history*


history.refresh_history()                              *history.refresh_history*


history.open_file()                                          *history.open_file*


==============================================================================
Job Control                                              *firvish.features.jobs*

Firvish offers builtin job control functionality which is basically a wrapper around Neovim's
builtin |job-control|. The job list is again just a normal vim buffer and you can manipulate it
using normal vim commands. For example, you can |dd| a few lines to delete those jobs from the
job list.

The job list can be configured through |firvish.setup|. By default, it has the following
configuration:

>
require("firvish").setup {
    features = {
        jobs = {
            behavior = {
                -- Specifies how to open the job list when using the |:FirvishJobs| command
                -- or the Lua API.
                open = "pedit",
                -- Specifies how to open the buffer list when bang ! is given to the
                -- |:FirvishJobs|
                -- command.
                bang_open = "vsplit",
            },
            keymaps = {
                -- See |firvish-jobs-keymaps|
            },
        },
    },
}
<


                                                                  *:FirvishJobs*
:FirvishJobs[!]
    Open the job list.
    If bang ! is given, will use the alternate open behavior:
    `features.jobs.behavior.bang_open`


                                                                  *firvish-jobs*
                                                          *firvish-jobs-keymaps*
The firvish-jobs filetype is used when viewing the job list.

Default mappings ~
    <CR>    Open the job output window for the job under the cursor
    <C-s>   Open the job output window for the job under the cursor in a split
    <C-v>   Open the job output window for the job under the cursor in a vertical split

Mappings can be configured through |firvish.setup|. Assigning a mapping to `false` disables it.
When configuring mappings through |firvish.setup|, you must specify a callback function. This
callback function will receive the buffer-local lib (|firvish.filetype.jobs|) which can be used to
perform common actions relevant to the job list.

>
require("firvish").setup {
    features = {
        jobs = {
            keymaps = {
                n = {
                    gm = {
                        callback = function(lib)
                            -- Filter the buffer list to show only modified files
                            local is_modified = Filter:new(function(buffer)
                                return buffer:get_option "modified" == true
                            end)
                            lib.refresh(is_modified)
                        end,
                        desc = "[firvish] Filter modified files",
                    },
                },
            },
        },
    },
}
<


vim:tw=78:ts=8:noet:ft=help:norl:
